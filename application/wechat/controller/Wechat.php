<?php
namespace app\wechat\controller;
use tool\WchatOauth;
use think\Controller;

class Wechat extends Controller {

    protected $wechat;
    protected $instance_id;
    protected $wechat_appid;
    protected $redirect_url;
    protected $scope;
    protected $url;
    protected $config;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->wechat = new WchatOauth(); // 微信公众号相关类
        $this->config = config('weixin');
        $this->instance_id = 0;
        $this->token = $this->config['token'];
        define("TOKEN", $this->token);
        $this->getMessage();
    }

    /**
     * 关联公众号微信
     */
    public function relateWeixin()
    {
        $sign = input('signature', '');
        if (defined("TOKEN") && isset($sign)) {
            $signature = $sign;
            $timestamp = input('timestamp');
            $nonce = input('nonce');
            $token = TOKEN;
            $tmpArr = array(
                $token,
                $timestamp,
                $nonce
            );
            sort($tmpArr, SORT_STRING);
            $tmpStr = implode($tmpArr);
            $tmpStr = sha1($tmpStr);
            if ($tmpStr == $signature) {
                $echostr = input('echostr', '');
                if (!empty($echostr)) {
                    echo $echostr;
                }
                return 1;
            } else {
                return 0;
            }
        }
    }

    /**
     * 微信开放平台模式(需要对消息进行加密和解密)
     * 微信获取消息以及返回接口
     */
    public function getMessage()
    {
        $from_xml = file_get_contents('php://input');
        if (empty($from_xml)) {
            return;
        }
        $signature = input('msg_signature', '');
        $signature = input('timestamp', '');
        $nonce = input('nonce', '');
        $url = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'] . '?' . $_SERVER['QUERY_STRING'];
        $ticket_xml = $from_xml;
        $postObj = simplexml_load_string($ticket_xml, 'SimpleXMLElement', LIBXML_NOCDATA);
        $this->instance_id = 0;
        if (!empty($postObj->MsgType)) {
            switch ($postObj->MsgType) {
                case "text":
                    //用户发的消息   存入表中
                    //$this->addUserMessage((string)$postObj->FromUserName, (string) $postObj->Content, (string) $postObj->MsgType);
                    $resultStr = $this->MsgTypeText($postObj);
                    break;
                case "event":
                    $resultStr = $this->MsgTypeEvent($postObj);
                    break;
                default:
                    $resultStr = "";
                    break;
            }
        }
        if (!empty($resultStr)) {
            echo $resultStr;
        } else {
            echo '';
        }
    }

    /**
     * 文本消息回复格式
     *
     * @param unknown $postObj
     * @return Ambigous <void, string>
     */
    private function MsgTypeText($postObj)
    {
        $funcFlag = 0; // 星标
        $wchat_replay = $this->wchat->getWhatReplay($this->instance_id, (string)$postObj->Content);

        // 判断用户输入text
        if (!empty($wchat_replay)) { // 关键词匹配回复
            $contentStr = $wchat_replay; // 构造media数据并返回
        } elseif ($postObj->Content == "uu") {
            $contentStr = "shopId：" . $this->instance_id;
        } elseif ($postObj->Content == "TESTCOMPONENT_MSG_TYPE_TEXT") {
            $contentStr = "TESTCOMPONENT_MSG_TYPE_TEXT_callback"; // 微店插件功能 关键词，预留口
        } elseif (strpos($postObj->Content, "QUERY_AUTH_CODE") !== false) {
            $get_str = str_replace("QUERY_AUTH_CODE:", "", $postObj->Content);
            $contentStr = $get_str . "_from_api"; // 微店插件功能 关键词，预留口
        } else {
            $content = $this->wchat->getDefaultReplay($this->instance_id);
            if (!empty($content)) {
                $contentStr = $content;
            } else {
                $contentStr = '欢迎！';
            }
        }
        if (is_array($contentStr)) {
            $resultStr = $this->wchat->event_key_news($postObj, $contentStr);
        } elseif (!empty($contentStr)) {
            $resultStr = $this->wchat->event_key_text($postObj, $contentStr);
        } else {
            $resultStr = '';
        }
        return $resultStr;
    }

    /**
     * 事件消息回复机制
     */
    // 事件自动回复 MsgType = Event
    private function MsgTypeEvent($postObj)
    {
        $contentStr = "";
        switch ($postObj->Event) {
            case "subscribe": // 关注公众号 添加关注回复
                //$content = $this->wechat->getSubscribeReplay($this->instance_id);
                $content = "nihao,欢迎关注公众号";
                if (!empty($content)) {
                    $contentStr = $content;
                }
                // 构造media数据并返回
                break;
            case "unsubscribe": // 取消关注公众号
                break;
            case "VIEW": // VIEW事件 - 点击菜单跳转链接时的事件推送
                // $this->wchat->weichat_menu_hits_view($postObj->EventKey); //菜单计数
                $contentStr = "";
                break;
            case "SCAN": // SCAN事件 - 用户已关注时的事件推送
                $contentStr = "";
                break;
            case "CLICK": // CLICK事件 - 自定义菜单事件
                //$menu_detail = $this->wechat->getWeixinMenuDetail($postObj->EventKey);
                //$media_info = $this->wechat->getWeixinMediaDetail($menu_detail['media_id']);
                //$contentStr = $this->wechat->getMediaWchatStruct($media_info); // 构造media数据并返回
                break;
            default:
                break;
        }
        // $contentStr = $postObj->Event."from_callback";//测试接口正式部署之后注释不要删除
        if (is_array($contentStr)) {
            $resultStr = $this->wechat->event_key_news($postObj, $contentStr);
        } else {
            $resultStr = $this->wechat->event_key_text($postObj, $contentStr);
        }
        return $resultStr;
    }


    public function auth(){
        $urls = input('url');
        $this->appid = $this->config['appid'];
        $this->redirect_url = $this->config['remote'].'/wechat/wechat/auth_redirect?urls='.$urls;
        $this->scope = 'snsapi_userinfo';
        $this->url = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid='.$this->appid.'&redirect_uri='.$this->redirect_url.'&response_type=code&scope='.$this->scope.'&state=STATE#wechat_redirect';
        $this->redirect($this->url);
    }


    public function auth_redirect(){
        $data = input('get.');
        $data_insert= []; // 接收插入数据库的数据
        $result =  $this->wechat->auth($data['code']);
        $result = json_decode($result,true);
        $user_info = $this->wechat->user_info($result['access_token'],$result['openid']);
        $user_info = json_decode($user_info,true);

        //var_dump($user_info);
        session('openid',$user_info['openid']);
        $is_user = db('wx_user')->where('openid',$user_info['openid'])->find();
        //入库
        if (!$is_user){
            $str = str_pad(mt_rand(0, 999999), 6, "0", STR_PAD_BOTH);//md5加密，time()当前时间戳
            $data_insert['member_num'] .= 'D'.$str;
            $data_insert['openid'] = $user_info['openid'];
            $data_insert['username'] = $user_info['nickname'];
            $data_insert['sex'] = $user_info['sex'];
            $data_insert['city'] = $user_info['city'];
            $data_insert['province'] = $user_info['province'];
            $data_insert['avatar']=$user_info['headimgurl'];
            $data_insert['reg_time'] = time();
            db('wx_user')->insert($data_insert);
        }
        $this->redirect('wechat/index/index');
    }

}